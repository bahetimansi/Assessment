package com.assessment;

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;

import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
	
	@Bean
    public RestTemplate restTemplate() throws NoSuchAlgorithmException, KeyManagementException {
		 SSLContext sslContext = SSLContext.getInstance("TLS");
	        sslContext.init(null, new javax.net.ssl.TrustManager[]{
	                new javax.net.ssl.X509TrustManager() {
	                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {
	                        return null; // Trust all certificates
	                    }

	                    public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
	                    }

	                    public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
	                    }
	                }
	        }, new java.security.SecureRandom());
	        CloseableHttpClient httpClient = HttpClients.custom()
	                .setSSLContext(sslContext)  // Ensure sslContext is initialized
	                .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE) // Ignore hostname verification
	                .setConnectionManager(new PoolingHttpClientConnectionManager())
	                .build();

	        return new RestTemplate(new HttpComponentsClientHttpRequestFactory(httpClient));
	}
}
